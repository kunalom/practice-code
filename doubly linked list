#include<iostream>
using namespace std;

/*********************************doubly linked list*****************************/ 

class node{

    public:
    int data;
    node* prev;
    node* next;

    node(int n){
        this->data=n;
        this->prev=NULL;
        this->next=NULL;
    }

    ~node(){
        int value=this->data;
        if(this->next!=NULL){
            this->next=NULL;
            delete next;
        }
        cout<<"memory is free up for : "<<value<<endl;
    }

};

void insertathead(node* &head, node* &tail, int n){
    if(head==NULL){
        node* temp=new node(n);
        head=temp;
        tail=temp;
    }
    else{
    node* temp=new node(n);
    temp->next=head;
    head->prev=temp;
    head=temp;
    }
}

void insertattail(node* &head, node* &tail, int n){
    if(tail==NULL){
        node* temp =new node(n);
        tail=temp;
        head=temp;
    }
    else{
    node* temp=new node(n);
    tail->next=temp;
    temp->prev=tail;
    tail=temp;
    }
}

void insertatposition(node* &head, node* &tail, int position, int n){
    
    if(position==1){
        insertathead(head,tail,n);
        return;
    }
    
    
    node* temp=head;
    int count=1;
    while(count<position-1){
        temp=temp->next;
        count++;
    }

    if(temp->next==NULL){
        insertattail(head,tail,n);
        return;
    }

    node* insertnew=new node(n);
    insertnew->next=temp->next;
    temp->next->prev=insertnew;
    temp->next=insertnew;
    insertnew->prev=temp;

}

void deletenode(node* &head, int position){
    if(position==1){
        node* temp=head;
        head->next->prev=NULL;
        head=head->next;
        delete temp;
    }
    else{
        node* curr=head;
        node* back=NULL;
        int count=1;
        while(count<position){
            back=curr;
            curr=curr->next;
            count++;
        }
        back->next=curr->next;
        curr->next->prev=back;
        curr->next=NULL;
        curr->prev=NULL;
        delete curr;
    }
}

void print(node* &head){
    node* temp=head;
    while(temp!=0){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<endl;
}



int main(){
    node* node1=new node(10);
    cout<<node1->data<<endl;
    cout<<node1->prev<<endl;
    cout<<node1->next<<endl;

    node* head=node1;
    node* tail=node1;

    insertathead(head,tail,20);
    print(head);

    insertattail(head,tail,30);
    print(head);

    insertatposition(head,tail,3,40);
    print(head);

    deletenode(head,2);
    print(head);

    cout<<"head: "<<head->data<<endl;
    cout<<"tail: "<<tail->data<<endl;

    return 0;
}
